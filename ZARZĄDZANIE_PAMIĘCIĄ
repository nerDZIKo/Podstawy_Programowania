Optymalizuj strukturę danych:
Wybieraj odpowiednie struktury danych dla swoich potrzeb. Na przykład zamiast listy, której elementy są bardzo duże, rozważ użycie generatorów w Pythonie, które nie trzymają w pamięci wszystkich danych jednocześnie.

Zwalniaj pamięć po użyciu:
Choć Python automatycznie zarządza pamięcią, należy pamiętać o zarządzaniu obiektami, które są już niepotrzebne. W szczególności, jeśli używasz zewnętrznych zasobów (np. plików, połączeń sieciowych), zawsze je zamykaj po zakończeniu pracy.

Pamiętaj o cyklach referencji:
Cykl referencji (np. obiekty, które wzajemnie się referencjonują) mogą powodować, że obiekty nie będą zwolnione przez GC. Choć Python ma mechanizm wykrywania takich cykli, warto unikać tworzenia takich struktur, gdzie to możliwe.

Używaj narzędzi do monitorowania pamięci:
W Pythonie dostępne są narzędzia, takie jak gc do ręcznego wymuszenia zbierania śmieci, psutil do monitorowania użycia pamięci przez procesy, czy objgraph do wykrywania cykli referencyjnych.


+-----------------------------------------------+
|                  Alokacja Pamięci            |
|  - Pamięć Statyczna / Stała                  |
|  - Pamięć Dynamiczna (Heap)                  |
|  - Pamięć Stosowa (Stack)                    |
|  - Wskaźniki i Referencje                    |
|  - Zwalnianie Pamięci                        |
+-----------------------------------------------+
                 |
                 v
+-----------------------------------------------+
|         Pamięć Statyczna / Stała              |
|  Co to?                                        |
|  - Pamięć przydzielona na czas całego         |
|    działania programu.                       |
|  Jak zarządzać?                               |
|  - Automatyczne zarządzanie przez kompilator. |
|  - Brak konieczności ręcznego zwalniania.    |
+-----------------------------------------------+
                 |
                 v
+-----------------------------------------------+
|         Pamięć Dynamiczna (Heap)              |
|  Co to?                                        |
|  - Pamięć przydzielana w czasie działania     |
|    programu (np. przez `malloc`, `new`).      |
|  Jak zarządzać?                               |
|  - Alokacja: `malloc`, `calloc`, `new`.       |
|  - Zwalnianie: `free` (w C), `delete` (w C++). |
+-----------------------------------------------+
                 |
                 v
+-----------------------------------------------+
|        Pamięć Stosowa (Stack)                 |
|  Co to?                                        |
|  - Pamięć przydzielana dla zmiennych         |
|    lokalnych i argumentów funkcji.            |
|  Jak zarządzać?                               |
|  - Automatyczne zarządzanie przez system.     |
|  - Pamięć zwalniana, gdy funkcja kończy działanie. |
+-----------------------------------------------+
                 |
                 v
+-----------------------------------------------+
|         Wskaźniki i Referencje                |
|  Co to?                                        |
|  - Wskaźniki przechowują adresy pamięci.      |
|    Pozwalają na manipulowanie danymi.         |
|  Jak zarządzać?                               |
|  - Używaj wskaźników ostrożnie.               |
|  - Zawsze sprawdzaj, czy wskaźnik jest ważny. |
|  - `NULL` / `nullptr` dla nieużywanych wskaźników. |
+-----------------------------------------------+
                 |
                 v
+-----------------------------------------------+
|          Zwalnianie Pamięci                   |
|  Co to?                                        |
|  - Proces usuwania pamięci, która już nie     |
|    jest potrzebna.                            |
|  Jak zarządzać?                               |
|  - Dynamiczna pamięć: ręczne zwalnianie.      |
|  - Języki z Garbage Collection (Java, Python):|
|    Automatyczne zwalnianie nieużywanej pamięci.|
+-----------------------------------------------+
                 |
                 v
+-----------------------------------------------+
|                Podsumowanie                   |
|  - Alokacja pamięci: `malloc`, `new`, pamięć  |
|    statyczna dla zmiennych globalnych i stałych.|
|  - Zarządzanie pamięcią: programista kontroluje|
|    pamięć dynamiczną i stosową, kompilator     |
|    statyczną.                                  |
|  - Używaj wskaźników ostrożnie, by uniknąć błędów|
|    pamięciowych (segmentation fault).          |
|  - Zwalniaj pamięć po jej użyciu, by uniknąć    |
|    wycieków pamięci.                           |
+-----------------------------------------------+
